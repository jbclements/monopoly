#lang racket

(require "monopoly.rkt"
         "tests.rkt"
         "monopoly-plot-posns.rkt")



(printf "\nstarting game!\n\n")

(define ABORT-TURN 50000)

(reset-posn-log)

(time
 (let loop ([turn 0]
            [gs init-state])
   (define next-state (take-turn gs roll))
   (cond [(< ABORT-TURN turn)
          (display (~a "game aborted after "ABORT-TURN" turns.\n"))
          next-state]
         [(= 1 (vector-length (gamestate-id-vec next-state)))
          (display (~a "game ends after "turn" turns\n"))
          next-state]
         [else (loop (add1 turn) (next-turn next-state))])))

(plot-posn-distr posn-log)

;; computed from a game with 4M moves. No chance or community chest cards, though.
#;(define computed-landing-distribution
 (list
  (vector 0 (ivl 0.021992305789842986 0.022340795363969983))
  (vector 1 (ivl 0.022287882895731696 0.02263864385997687))
  (vector 2 (ivl 0.022026055673652203 0.022374805424774376))
  (vector 3 (ivl 0.021863386408044957 0.022210880174728442))
  (vector 4 (ivl 0.021774087070796044 0.022120889223745072))
  (vector 5 (ivl 0.02192543521662568 0.02227340865562368))
  (vector 6 (ivl 0.02179756475775102 0.022144548889564783))
  (vector 7 (ivl 0.021917050221344193 0.02226495888205706))
  (vector 8 (ivl 0.02171161990845023 0.02205793735817253))
  (vector 9 (ivl 0.02183886045867973 0.022186164425212974))
  (vector 10 (ivl 0.0226815788516006 0.02303534030152635))
  (vector 11 (ivl 0.02351828071263816 0.023878327502308172))
  (vector 12 (ivl 0.024488601904442298 0.024855789066229428))
  (vector 13 (ivl 0.025723206869101175 0.026099262076011164))
  (vector 14 (ivl 0.02694345521131159 0.027328051731978387))
  (vector 15 (ivl 0.028216868071102057 0.028610156783329798))
  (vector 16 (ivl 0.028170098861138564 0.028563072156965127))
  (vector 17 (ivl 0.02809753346309943 0.028490016804468176))
  (vector 18 (ivl 0.02801762803272911 0.028409571061560324))
  (vector 19 (ivl 0.02793562578257017 0.02832701344622907))
  (vector 20 (ivl 0.02780979198994289 0.02820032570613482))
  (vector 21 (ivl 0.02732890691624005 0.027716157655620216))
  (vector 22 (ivl 0.027515554749606132 0.0279040834291244))
  (vector 23 (ivl 0.02772569365697957 0.02811565548139592))
  (vector 24 (ivl 0.027760087930837993 0.02815028375981471))
  (vector 25 (ivl 0.027718982588338503 0.0281088987349585))
  (vector 26 (ivl 0.027664035826831964 0.028053577760509974))
  (vector 27 (ivl 0.027527508679820577 0.0279161190445185))
  (vector 28 (ivl 0.027600281058801766 0.027989388285294597))
  (vector 29 (ivl 0.027509682647061284 0.02789817119347558))
  (vector 30 (ivl 0.02691472499975678 0.027299122860228446))
  (vector 31 (ivl 0.02590165542985118 0.02627897322250453))
  (vector 32 (ivl 0.025024533505334567 0.025395599194730875))
  (vector 33 (ivl 0.023966950286352724 0.024330318061967064))
  (vector 34 (ivl 0.022994155644675423 0.023350279517264535))
  (vector 35 (ivl 0.021624208429474094 0.0219698463719072))
  (vector 36 (ivl 0.02174075722998504 0.02208730085838487))
  (vector 37 (ivl 0.02178624515216449 0.022133141557206377))
  (vector 38 (ivl 0.02177806988901168 0.022124902920732284))
  (vector 39 (ivl 0.02180112833979826 0.022148140084277988))))